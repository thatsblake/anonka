from aiogram import Router, F, Bot
from aiogram.filters import ExceptionMessageFilter, CommandObject, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.handlers import ErrorHandler
from aiogram.types import Message, CallbackQuery

from app.user.user_keyboard import *
from data.database.db import *
from app.payment import *
import data.config as config

router = Router()


class UserState(StatesGroup):
    send_message = State()


@router.message(Command("start"))
async def cmd_start(message: Message, command: CommandObject, state: FSMContext):
    if not get_users_exist(message.from_user.id):
        add_user_to_db(message.from_user.id)
        config.logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} - {message.from_user.id}")
    if command.args:
        u_id = command.args
        if u_id == str(message.from_user.id):
            await message.answer("‚ùå–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ")
        elif get_users_exist(u_id):
            await message.answer(f"""–¢—ã –æ—Ç–∫—Ä—ã–ª(–∞) —Å—Å—ã–ª–∫—É –Ω–∞ '{config.bot_name}'.

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Telegram.

–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å".

–ü–æ–ª—É—á–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —É–∑–Ω–∞–µ—Ç, –∫—Ç–æ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏–ª.""", reply_markup=main_cancel_keyboard())
            await state.set_state(UserState.send_message)
            await state.update_data(u_id=u_id)
        else:
            await message.answer(f"""–Ø - '{config.bot_name}', –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Telegram.

            –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —Å–∫–∞–∑–∞—Ç—å –∫–æ–º—É-—Ç–æ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ, –Ω–æ –Ω–µ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –æ–Ω –∑–Ω–∞–ª, –∫—Ç–æ —ç—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç, —Ç–æ –¢–∞–π–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ - —ç—Ç–æ —Ç–æ, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ.""",
                                 reply_markup=main_keyboard())
    else:
        await message.answer(f"""–Ø - '{config.bot_name}', –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Telegram.
        
–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —Å–∫–∞–∑–∞—Ç—å –∫–æ–º—É-—Ç–æ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ, –Ω–æ –Ω–µ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –æ–Ω –∑–Ω–∞–ª, –∫—Ç–æ —ç—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç, —Ç–æ –¢–∞–π–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ - —ç—Ç–æ —Ç–æ, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ.""",
                             reply_markup=main_keyboard())


@router.message(F.text == "‚ùå–û—Ç–º–µ–Ω–∞")
async def cancel(message: Message, state: FSMContext):
    await message.answer("–í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard())
    await state.clear()


@router.callback_query(F.data.startswith("cancel"))
async def cancel(call: CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except:
        pass
    await state.clear()


@router.message(F.text == "üíº–ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message):
    user_info = get_user_info(message.from_user.id)
    if user_info[2] == 0:
        status = "–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
    else:
        status = "–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ " + user_info[3]
    text = f"""üíº–ü—Ä–æ—Ñ–∏–ª—å
        
üóì–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <i>{user_info[1]}</i>
üì©–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <i>{user_info[5]}</i>
    
üîÆ–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: <i>{status}</i>
üßø–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: <i>{user_info[4]}</i>
    
üìé–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: <code>t.me/{config.bot_username}?start={message.from_user.id}</code>"""
    await message.answer(text, parse_mode="HTML", reply_markup=profile_keyboard())
    try:
        await message.delete()
    except:
        pass


@router.callback_query(F.data.startswith("back_profile"))
async def profile(call: CallbackQuery):
    user_info = get_user_info(call.from_user.id)
    if user_info[2] == 0:
        status = "–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
    else:
        status = "–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ " + user_info[3]
    text = f"""üíº–ü—Ä–æ—Ñ–∏–ª—å

üóì–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <i>{user_info[1]}</i>
üì©–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <i>{user_info[5]}</i>

üîÆ–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: <i>{status}</i>
üßø–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: <i>{user_info[4]}</i>

üìé–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: <code>t.me/{config.bot_username}?start={call.from_user.id}</code>"""
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=profile_keyboard())


@router.message(F.text == "‚ùì–û –±–æ—Ç–µ")
async def about(message: Message):
    await message.answer(f"""<b>–û –±–æ—Ç–µ</b>
<b>–ë–æ—Ç "{config.bot_name}"</b> - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–∏–º –ª—é–¥—è–º. –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –≤–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—Å–ª–µ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é, –Ω–æ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ.

<i>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –±–æ—Ç–∞:</i>

  <b>–ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å</b>: –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—è —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏.
  <b>–ü—Ä–æ—Å—Ç–æ—Ç–∞</b>: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –≤—Å–µ–≥–æ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤.
  <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</b>: —Å–æ–æ–±—â–µ–Ω–∏—è —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö –±–æ—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—é.

<i>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:</i>

1. <b>–û—Ç–∫—Ä–æ–π—Ç–µ —á–∞—Ç —Å –±–æ—Ç–æ–º –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ</b>.
3. –í–≤–µ–¥–∏—Ç–µ <b>—Å–æ–æ–±—â–µ–Ω–∏–µ</b>.
4. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"–û—Ç–ø—Ä–∞–≤–∏—Ç—å"</b>.

<i>–ü–æ–¥–ø–∏—Å–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"</i>

–ü–æ–¥–ø–∏—Å–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å" –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –≤–∏–¥–µ—Ç—å –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ. –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:

  1 –º–µ—Å—è—Ü - <i>{config.subs_prices[0]} —Ä—É–±–ª–µ–π</i>
  3 –º–µ—Å—è—Ü–∞ - <i>{config.subs_prices[1]} —Ä—É–±–ª–µ–π</i>
  12 –º–µ—Å—è—Ü–µ–≤ - <i>{config.subs_prices[2]} —Ä—É–±–ª–µ–π</i>

–ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É, –æ—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –±–æ—Ç–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç <b>"–ü–æ–¥–ø–∏—Å–∫–∞"</b>.

<i>–ö–æ–Ω—Ç–∞–∫—Ç—ã</i>

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É {config.admin_username}.
""", parse_mode="HTML", reply_markup=cancel_keyboard())
    try:
        await message.delete()
    except:
        pass


@router.message(UserState.send_message, F.text)
async def send_text_message(message: Message, state: FSMContext, bot: Bot):
    text = message.text
    data = await state.get_data()
    u_id = data.get("u_id")
    try:
        await bot.send_message(u_id, "üì©–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n" + text,
                               reply_markup=guess_keyboard(message.from_user.username, message.from_user.first_name))
        add_count_mess(u_id)
        await message.answer("‚úÖ–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=main_keyboard())
        await state.clear()
    except Exception as e:
        await message.answer("‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=main_keyboard())
        await state.clear()
        config.logger.error(e)


@router.message(UserState.send_message, F.photo)
async def send_photo_message(message: Message, state: FSMContext, bot: Bot):
    photo = message.photo[-1].file_id
    if message.caption:
        text = "\n\n" + message.caption
    else:
        text = ""
    data = await state.get_data()
    u_id = data.get("u_id")
    try:
        await bot.send_photo(u_id, photo, caption="üì©–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" + text,
                             reply_markup=guess_keyboard(message.from_user.username, message.from_user.first_name))
        add_count_mess(u_id)
        await message.answer("‚úÖ–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=main_keyboard())
        await state.clear()
    except Exception as e:
        await message.answer("‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=main_keyboard())
        await state.clear()
        config.logger.error(e)


@router.message(UserState.send_message, F.voice)
async def send_voice_message(message: Message, state: FSMContext, bot: Bot):
    voice = message.voice.file_id
    data = await state.get_data()
    u_id = data.get("u_id")
    try:
        await bot.send_voice(u_id, voice, caption="üì©–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                             reply_markup=guess_keyboard(message.from_user.username, message.from_user.first_name))
        add_count_mess(u_id)
        await message.answer("‚úÖ–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=main_keyboard())
        await state.clear()
    except Exception as e:
        await message.answer("‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=main_keyboard())
        await state.clear()
        config.logger.error(e)


@router.message(UserState.send_message, F.document)
async def send_document_message(message: Message, state: FSMContext, bot: Bot):
    document = message.document.file_id
    if message.caption:
        text = "\n\n" + message.caption
    else:
        text = ""
    data = await state.get_data()
    u_id = data.get("u_id")
    try:
        await bot.send_document(u_id, document, caption="üì©–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" + text,
                                reply_markup=guess_keyboard(message.from_user.username, message.from_user.first_name))
        add_count_mess(u_id)
        await message.answer("‚úÖ–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=main_keyboard())
        await state.clear()
    except Exception as e:
        await message.answer("‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        await state.clear()
        config.logger.error(e)


@router.message(UserState.send_message, F.audio)
async def send_audio_message(message: Message, state: FSMContext, bot: Bot):
    audio = message.audio.file_id
    if message.caption:
        text = "\n\n" + message.caption
    else:
        text = ""
    data = await state.get_data()
    u_id = data.get("u_id")
    try:
        await bot.send_audio(u_id, audio, caption="üì©–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" + text,
                             reply_markup=guess_keyboard(message.from_user.username, message.from_user.first_name))
        add_count_mess(u_id)
        await message.answer("‚úÖ–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=main_keyboard())
        await state.clear()
    except Exception as e:
        await message.answer("‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=main_keyboard())
        await state.clear()
        config.logger.error(e)


@router.message(UserState.send_message, F.video)
async def send_video_message(message: Message, state: FSMContext, bot: Bot):
    video = message.video.file_id
    if message.caption:
        text = "\n\n" + message.caption
    else:
        text = ""
    data = await state.get_data()
    u_id = data.get("u_id")
    try:
        await bot.send_video(u_id, video, caption="üì©–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" + text,
                             reply_markup=guess_keyboard(message.from_user.username, message.from_user.first_name))
        add_count_mess(u_id)
        await message.answer("‚úÖ–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=main_keyboard())
        await state.clear()
    except Exception as e:
        await message.answer("‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=main_keyboard())
        await state.clear()
        config.logger.error(e)


@router.message(UserState.send_message, F.video_note)
async def send_video_note_message(message: Message, state: FSMContext, bot: Bot):
    video_note = message.video_note.file_id
    data = await state.get_data()
    u_id = data.get("u_id")
    try:
        await bot.send_message(u_id, "üì©–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        await bot.send_video_note(u_id, video_note,
                                  reply_markup=guess_keyboard(message.from_user.username, message.from_user.first_name))
        add_count_mess(u_id)
        await message.answer("‚úÖ–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=main_keyboard())
        await state.clear()
    except Exception as e:
        await message.answer("‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=main_keyboard())
        await state.clear()
        config.logger.error(e)


@router.message(UserState.send_message, F.animation)
async def send_animation_message(message: Message, state: FSMContext, bot: Bot):
    animation = message.animation.file_id
    if message.caption:
        text = "\n\n" + message.caption
    else:
        text = ""
    data = await state.get_data()
    u_id = data.get("u_id")
    try:
        await bot.send_animation(u_id, animation, caption="üì©–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" + text,
                                 reply_markup=guess_keyboard(message.from_user.username, message.from_user.first_name))
        add_count_mess(u_id)
        await message.answer("‚úÖ–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=main_keyboard())
        await state.clear()
    except Exception as e:
        await message.answer("‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=main_keyboard())
        await state.clear()
        config.logger.error(e)


@router.message(UserState.send_message, F.sticker)
async def send_sticker_message(message: Message, state: FSMContext, bot: Bot):
    sticker = message.sticker.file_id
    data = await state.get_data()
    u_id = data.get("u_id")
    try:
        await bot.send_message(u_id, "üì©–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        await bot.send_sticker(u_id, sticker,
                               reply_markup=guess_keyboard(message.from_user.username, message.from_user.first_name))
        add_count_mess(u_id)
        await message.answer("‚úÖ–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=main_keyboard())
        await state.clear()
    except Exception as e:
        await message.answer("‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=main_keyboard())
        await state.clear()
        config.logger.error(e)


@router.callback_query(F.data.startswith("guess"))
async def guess(call: CallbackQuery, state: FSMContext):
    data = call.data.split(":")
    username = data[1]
    name = data[2]
    if check_subscription(call.from_user.id):
        await call.message.answer(f"ü´£–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {name} -> @{username}")
    elif check_bought_views(call.from_user.id) != 0:
        await call.message.answer(
            f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {check_bought_views(call.from_user.id)} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è?",
            reply_markup=quest_keyboard())
        await state.update_data(username=username, name=name)
    else:
        await call.message.answer("‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã. –•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –µ—â–µ?",
                                  reply_markup=ask_buy_views_keyboard())


@router.callback_query(F.data.startswith("subscription"))
async def subscription(call: CallbackQuery):
    await call.message.edit_text(f"""<b>–•–æ—á–µ—à—å –∑–Ω–∞—Ç—å, –∫—Ç–æ —Ç–µ–±–µ –ø–∏—à–µ—Ç –≤ –±–æ—Ç–µ '{config.bot_name}'?</b>

<b>–ü—Ä–∏–æ–±—Ä–µ—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É</b> –∏ –ø–æ–ª—É—á–∞–π –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –ø—Ä–∏—Ö–æ–¥—è—Ç.

<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b>

  <i>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</i> —Ç—ã –±—É–¥–µ—à—å —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –ø–æ–ª—É—á–∞–µ—à—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–∂–∏–¥–∞–µ—à—å.
  <i>–ö–æ–Ω—Ç—Ä–æ–ª—å:</i> —Ç—ã –º–æ–∂–µ—à—å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç –∫–æ–≥–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —Å–æ–æ–±—â–µ–Ω–∏—è.
  <i>–ò–Ω—Ç–µ—Ä–µ—Å:</i> –æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –±–æ–ª–µ–µ –∏–Ω—Ç—Ä–∏–≥—É—é—â–∏–º.

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:</b>

  1 –º–µ—Å—è—Ü - <i>{config.subs_prices[0]} —Ä—É–±–ª–µ–π</i>
  3 –º–µ—Å—è—Ü–∞ - <i>{config.subs_prices[1]} —Ä—É–±–ª–µ–π</i>
  12 –º–µ—Å—è—Ü–µ–≤ - <i>{config.subs_prices[2]} —Ä—É–±–ª–µ–π</i>

<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:</b>
""", parse_mode="HTML", reply_markup=subscription_keyboard())


@router.callback_query(F.data.startswith("buy_subscription"))
async def but_subscription(call: CallbackQuery, state: FSMContext):
    month = call.data.split(":")[1]
    text = call.data.split(":")[2]
    await state.update_data(month=month)
    price = get_subscription_price(month)
    p_id, link = create_payment()
    if check_subscription(call.from_user.id):
        await call.message.edit_text("‚ùå–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", reply_markup=subscription_info_keyboard())
    else:
        await call.message.edit_text(f"""–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {month} {text}.
        
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:</b> <i>{price} —Ä—É–±–ª–µ–π</i>

–ß—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É</b>""", parse_mode="HTML",
                                     reply_markup=buy_subscription_keyboard(link, p_id))


@router.callback_query(F.data.startswith("check_subscription_pay"))
async def check_pay(call: CallbackQuery, state: FSMContext, bot: Bot):
    p_id = call.data.split(":")[1]
    if check_payment(p_id):
        data = await state.get_data()
        month = data.get("month")
        add_subscription(call.from_user.id, month)
        await call.message.edit_text("‚úÖ–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
                                     reply_markup=subscription_info_keyboard())
    else:
        await call.answer("‚ùå–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


@router.callback_query(F.data.startswith("views"))
async def views(call: CallbackQuery):
    await call.message.edit_text(f"""<b>–ö—É–ø–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã</b>

–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—è –ø–æ–¥–ø–∏—Å–∫—É.

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</b> <i>{config.view_price} —Ä—É–±–ª–µ–π</i>

<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:</b>""", parse_mode="HTML", reply_markup=views_keyboard())


@router.callback_query(F.data.startswith("buy_views"))
async def buy_views(call: CallbackQuery, state: FSMContext):
    count = call.data.split(":")[1]
    await state.update_data(count=count)
    p_id, link = create_payment()
    await call.message.edit_text(f"""–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{count}</b> –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:</b> <i>{int(count) * config.view_price} —Ä—É–±–ª–µ–π</i>

–ß—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É</b>""", parse_mode="HTML",
                                     reply_markup=buy_views_keyboard(link, p_id))


@router.callback_query(F.data.startswith("check_views_pay"))
async def check_pay(call: CallbackQuery, state: FSMContext):
    p_id = call.data.split(":")[1]
    if check_payment(p_id):
        data = await state.get_data()
        count = data.get("count")
        add_views(call.from_user.id, count)
        await call.message.edit_text("‚úÖ–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã",
                                     reply_markup=subscription_info_keyboard())
    else:
        await call.answer("‚ùå–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


@router.callback_query(F.data.startswith("quest"))
async def quest(call: CallbackQuery, state: FSMContext):
    answer = call.data.split(":")[1]
    if answer == "yes":
        if check_bought_views(call.from_user.id) > 0:
            data = await state.get_data()
            username = data.get("username")
            name = data.get("name")
            subtract_bought_views(call.from_user.id)
            try:
                await call.message.delete()
            except:
                pass
            await call.message.answer(f"ü´£–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {name} -> @{username}")
    else:
        try:
            await call.message.delete()
        except:
            pass


# –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏
@router.errors(ExceptionMessageFilter(
    "Telegram server says - Bad Request: message is not modified: specified new message content and reply markup are exactly the same as a current content and reply markup of the message")
)
class MyHandler(ErrorHandler):
    async def handle(self):
        pass


@router.error()
class MyHandler(ErrorHandler):
    async def handle(self):
        print(self.exception_name)
        print(self.exception_message[self.exception_message.find("exception="):])
        config.logger.error(self.exception_name + " | " + self.exception_message[self.exception_message.find("exception="):])
